# -*- coding: utf-8 -*-
"""Copy of Assignment_5-heart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QTOoK1-f7ERpXl9b8S9BsJ_fqo2hiz6Z
"""

import pandas as pd
df = pd.read_csv('heartdisease.csv')
df.head()

"""**DATA CLEANING**"""

print("Missing Values", df.isnull().sum())
df.dropna(inplace=True)

print(df.duplicated().sum())
df.drop_duplicates(inplace=True)

"""**DATA INTEGRATION**"""

subset1 = ['Age', 'Sex', 'ChestPain', 'RestBP', 'Chol']
subset2 = ['Fbs', 'RestECG', 'MaxHR', 'ExAng', 'Oldpeak']

merged_df = pd.concat([df[subset1],df[subset2]], axis=1)
merged_df.head()

"""**ERROR CORRECTING (OUTLIER REMOVAL)**"""

import matplotlib.pyplot as plt
import seaborn as sns


# Boxplot before correction
for col in numerical_cols:
    plt.figure(figsize=(4, 2))
    sns.boxplot(data=df, x=col)
    plt.title(f'Before removing outliers - {col}')
    plt.show()

# Remove outliers using IQR method
def remove_outliers(col):
    Q1 = col.quantile(0.25)
    Q3 = col.quantile(0.75)
    IQR = Q3 - Q1
    return col[~((col < (Q1 - 1.5 * IQR)) | (col > (Q3 + 1.5 * IQR)))]

for col in numerical_cols:
    df[col] = remove_outliers(df[col])


# print(df[numerical_cols].isnull().sum())
df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].median())

for col in numerical_cols:
    plt.figure(figsize=(4, 2))
    sns.boxplot(data=df, x=col)
    plt.title(f'Before removing outliers - {col}')
    plt.show()

"""**DATA TRANSFORMATION**"""

from sklearn.preprocessing import LabelEncoder, StandardScaler

# Separate features and target
X = df.drop('AHD', axis=1)
y = df['AHD']

# Label encode 'ChestPain' and 'Thal' columns
le = LabelEncoder()
X['ChestPain'] = le.fit_transform(X['ChestPain'])
X['Thal'] = le.fit_transform(X['Thal'])

scaler = StandardScaler()
numerical_cols = ['Age', 'Sex', 'RestBP', 'Chol', 'Fbs', 'RestECG', 'MaxHR', 'ExAng', 'Oldpeak', 'Slope', 'Ca']
X[numerical_cols] = scaler.fit_transform(X[numerical_cols])

"""**DATA MODEL BUILDING**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression
lr_model = LogisticRegression(max_iter=200)
lr_model.fit(X_train, y_train)
lr_preds = lr_model.predict(X_test)
print("Logistic Regression Accuracy:", accuracy_score(y_test, lr_preds))

# Support Vector Machine
svc_model = SVC()
svc_model.fit(X_train, y_train)
svc_preds = svc_model.predict(X_test)
print("SVM Accuracy:", accuracy_score(y_test, svc_preds))

# Confusion Matrix
ConfusionMatrixDisplay(confusion_matrix(y_test, svc_preds)).plot()
plt.title("SVM Confusion Matrix")
plt.show()